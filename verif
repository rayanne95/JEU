#!/usr/bin/env bash
# verification_etape1.sh — Valide l'étape 1 avec réponse FIXE = 920
# Règles :
#  - Si temps écoulé  -> -1 vie
#  - Si temps OK mais réponse != 920 -> -1 vie
#  - Si temps OK et réponse == 920   -> VALIDÉ (pas de perte)

set -euo pipefail

ETAPEDIR="etape1"
ANS_FILE="$ETAPEDIR/reponse.txt"
DEADLINE_FILE="$ETAPEDIR/.deadline"
LIVES_FILE=".lives"

EXPECTED="920"  # <<--- valeur attendue FIXE

# ----- vies -----
if [[ -f "$LIVES_FILE" ]]; then
  # shellcheck disable=SC1090
  source "$LIVES_FILE"
else
  LIVES=3
fi
save_lives(){ printf "LIVES=%s\n" "$LIVES" > "$LIVES_FILE"; }
lose_life(){ LIVES=$((LIVES-1)); (( LIVES<0 )) && LIVES=0; save_lives; echo "❤️ Vies restantes : $LIVES/3"; }

# ----- vérifs de base -----
if [[ ! -f "$DEADLINE_FILE" ]]; then
  echo "❌ Pas de deadline : lance d'abord ./start_etape1.sh"
  exit 1
fi
if [[ ! -f "$ANS_FILE" ]]; then
  echo "❌ Fichier réponse introuvable : $ANS_FILE"
  lose_life; exit 1
fi

# ----- temps -----
now=$(date +%s)
end=$(cat "$DEADLINE_FILE")
left=$(( end - now ))
if (( left <= 0 )); then
  echo "⏳ Temps écoulé — étape ratée."
  lose_life; exit 1
fi
printf "Temps restant: %02d:%02d\n" $((left/60)) $((left%60))

# ----- réponse -----
user_ans="$(tr -d '[:space:]' < "$ANS_FILE")"
if ! [[ "$user_ans" =~ ^[0-9]+$ ]]; then
  echo "❌ Réponse invalide (mets uniquement un nombre)."
  lose_life; exit 1
fi

# ----- décision -----
if [[ "$user_ans" == "$EXPECTED" ]]; then
  echo "✅ VALIDÉ — Bonne réponse ($EXPECTED) dans le temps."
  echo "$(date '+%F %T') ETAPE1 OK ans=$user_ans" >> verification.log
  exit 0
else
  echo "❌ Mauvaise réponse (attendu: $EXPECTED, reçu: $user_ans)."
  lose_life; exit 1
fi
